import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Brain, Target, Lightbulb } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';

interface LeapOfFaithBuilderProps {
  cpsData: {
    customer: string;
    problem: string;
    solution: string;
  };
  onBack: () => void;
  onNext: (lofaAssumptions: string[]) => void;
}

interface AssumptionAnalysis {
  assumptions: string[];
  isAnalyzing: boolean;
}

const LeapOfFaithBuilder = ({ cpsData, onBack, onNext }: LeapOfFaithBuilderProps) => {
  const [selectedCircle, setSelectedCircle] = useState<string | null>(null);
  const [analysis, setAnalysis] = useState<AssumptionAnalysis>({
    assumptions: [],
    isAnalyzing: false
  });
  const [leapOfFaithResults, setLeapOfFaithResults] = useState<string[]>([]);

  const generateAIResponse = async (circleType: string) => {
    try {
      const { data, error } = await supabase.functions.invoke('generate-leap-of-faith', {
        body: {
          cpsData,
          circleType,
          leapOfFaithResults
        }
      });

      if (error) {
        console.error('Error calling edge function:', error);
        if (error.message === 'QUOTA_EXCEEDED') {
          return [`You've exceeded your daily Gemini API quota (50 requests). Please wait until tomorrow or upgrade your API plan for higher limits.`];
        }
        return [`Error generating response: ${error.message}`];
      }

      return data.assumptions || [];
    } catch (error) {
      console.error('Error generating AI response:', error);
      return [`Error generating response. Please try again.`];
    }
  };

  const handleCircleClick = async (circleType: string) => {
    setSelectedCircle(circleType);
    setAnalysis({ assumptions: [], isAnalyzing: true });

    const aiResponse = await generateAIResponse(circleType);
    setAnalysis({
      assumptions: aiResponse,
      isAnalyzing: false
    });

    // Store leap of faith results for hypothesis generation
    if (circleType === 'assumption') {
      setLeapOfFaithResults(aiResponse);
    }
  };

  const circles = [
    {
      id: 'assumption',
      title: 'Leap of Faith Assumptions',
      icon: Brain,
      position: 'top-1/2 left-1/4 transform -translate-x-1/2 -translate-y-1/2',
      color: 'construction-orange'
    },
    {
      id: 'hypothesis',
      title: 'Respective Hypothesis',
      icon: Lightbulb,
      position: 'top-1/2 right-1/4 transform translate-x-1/2 -translate-y-1/2',
      color: 'construction-green'
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/20 relative overflow-hidden">
      {/* Blueprint grid background */}
      <div 
        className="absolute inset-0 opacity-10 pointer-events-none"
        style={{
          backgroundImage: `
            linear-gradient(hsl(var(--blueprint-blue)) 1px, transparent 1px),
            linear-gradient(90deg, hsl(var(--blueprint-blue)) 1px, transparent 1px)
          `,
          backgroundSize: '40px 40px'
        }}
      />

      <div className="relative z-10 container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold mb-4 text-foreground">
            Hypothesis Validation Framework
          </h1>
          <div className="max-w-4xl mx-auto space-y-4 text-muted-foreground">
            <p className="text-lg">
              Welcome to your Hypothesis Validation Framework! üéâ
            </p>
            <p>
              This is where we start turning your ideas into testable assumptions. You'll dive into your leap of faith assumptions‚Äîthose core beliefs that, if wrong, could jeopardize your entire business idea. Click on any of the circles to explore each step and get insights generated by our AI Lean Startup Strategist. Don't worry, we've got your back!
            </p>
            <p className="font-semibold">
              Start by clicking through to identify those leap-of-faith assumptions. These assumptions are critical to moving your idea forward with confidence!
            </p>
          </div>
        </div>


        {/* Interactive Circles */}
        <div className="relative h-[500px] mb-12">
          
          {circles.map((circle) => {
            const IconComponent = circle.icon;
            return (
              <button
                key={circle.id}
                onClick={() => handleCircleClick(circle.id)}
                className={`absolute ${circle.position} w-56 h-56 rounded-full border-4 ${
                  circle.id === 'assumption' ? 'border-construction-orange text-construction-orange' : 
                  'border-construction-green text-construction-green'
                } bg-background/90 backdrop-blur-sm hover:bg-opacity-10 transition-all duration-300 hover:scale-105 active:scale-95 flex flex-col items-center justify-center group shadow-xl animate-fade-in`}
                style={{ zIndex: 2 }}
              >
                <IconComponent className="w-16 h-16 mb-3" />
                <span className="text-base font-semibold text-center leading-tight px-2">
                  {circle.title}
                </span>
              </button>
            );
          })}
        </div>

        {/* AI Analysis Section */}
        {selectedCircle && (
        <div className={`bg-gradient-to-br from-card/90 to-background/80 backdrop-blur-sm rounded-xl p-6 mb-8 border-2 ${
          selectedCircle === 'assumption' ? 'border-construction-orange/60' : 'border-construction-green/60'
        } shadow-construction animate-fade-in`}>
            <div className="flex items-center gap-3 mb-6">
              <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                selectedCircle === 'assumption' ? 'bg-construction-orange' : 'bg-construction-green'
              }`}>
                {selectedCircle === 'assumption' ? (
                  <Brain className="w-6 h-6 text-white" />
                ) : (
                  <Lightbulb className="w-6 h-6 text-white" />
                )}
              </div>
              <div>
                <h3 className="text-2xl font-bold text-foreground">Analysis</h3>
                <p className="text-sm text-construction-orange font-medium">üöß Business Insights under construction...</p>
              </div>
            </div>
            
            <div className="mb-6">
              {(leapOfFaithResults?.length ?? 0) === 0 && selectedCircle === 'hypothesis' && (
                <p className="text-yellow-600 mb-4 font-medium">
                  ‚ö†Ô∏è Please click on "Leap of Faith Assumptions" first to generate assumptions before creating hypotheses.
                </p>
              )}
            </div>

            {analysis.isAnalyzing ? (
              <div className="flex items-center gap-2 text-muted-foreground">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
                {selectedCircle === 'leap-of-faith' && 'Analyzing Leap of Faith Assumptions...'}
                {selectedCircle === 'hypothesis' && 'Generating testable hypotheses...'}
                {selectedCircle === 'assumption' && 'Generating testable hypotheses from your assumptions...'}
              </div>
            ) : analysis.assumptions && analysis.assumptions.length > 0 ? (
              <div>
                <div className="space-y-4">
                  {(analysis.assumptions || []).map((assumption, index) => (
                    <div key={index} className="bg-gradient-to-r from-construction-yellow/10 to-construction-orange/10 border-l-4 border-construction-yellow p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                      <div className="flex items-start gap-3">
                        <div className="flex-shrink-0 w-8 h-8 bg-construction-yellow rounded-full flex items-center justify-center text-white font-bold text-sm">
                          {index + 1}
                        </div>
                        <p className="text-foreground font-medium leading-relaxed">{assumption}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : null}
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex justify-between items-center">
          <Button 
            variant="outline" 
            onClick={onBack}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to CPS Builder
          </Button>
          
          <div className="text-center">
            <p className="text-sm text-muted-foreground mb-2">
              Feel like tweaking your answers? No problem! Click "Back to CPS Builder" to revisit your Customer, Problem, and Solution statement.
            </p>
          </div>

          <Button 
            onClick={() => onNext(leapOfFaithResults)}
            className="bg-primary hover:bg-primary/90"
          >
            Next Step
          </Button>
        </div>
        
        <div className="text-center mt-4">
          <p className="text-sm text-muted-foreground">
            Ready to move to the next phase? Click "Next Step" to get actionable insights based on your answers in the CPS Hypothesis Builder and continue strengthening your framework.
          </p>
        </div>
      </div>
    </div>
  );
};

export default LeapOfFaithBuilder;